package ar.edu.um.programacion2.jh.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SaleAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleAllPropertiesEquals(Sale expected, Sale actual) {
        assertSaleAutoGeneratedPropertiesEquals(expected, actual);
        assertSaleAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleAllUpdatablePropertiesEquals(Sale expected, Sale actual) {
        assertSaleUpdatableFieldsEquals(expected, actual);
        assertSaleUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleAutoGeneratedPropertiesEquals(Sale expected, Sale actual) {
        assertThat(expected)
            .as("Verify Sale auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleUpdatableFieldsEquals(Sale expected, Sale actual) {
        assertThat(expected)
            .as("Verify Sale relevant properties")
            .satisfies(e -> assertThat(e.getDevicePrice()).as("check devicePrice").isEqualTo(actual.getDevicePrice()))
            .satisfies(e -> assertThat(e.getFinalPrice()).as("check finalPrice").isEqualTo(actual.getFinalPrice()))
            .satisfies(e -> assertThat(e.getSaleDate()).as("check saleDate").isEqualTo(actual.getSaleDate()))
            .satisfies(e -> assertThat(e.getCurrency()).as("check currency").isEqualTo(actual.getCurrency()))
            .satisfies(e -> assertThat(e.getFinalized()).as("check finalized").isEqualTo(actual.getFinalized()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSaleUpdatableRelationshipsEquals(Sale expected, Sale actual) {
        assertThat(expected)
            .as("Verify Sale relationships")
            .satisfies(e -> assertThat(e.getDevice()).as("check device").isEqualTo(actual.getDevice()));
    }
}
