package ar.edu.um.programacion2.jh.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ExtraAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExtraAllPropertiesEquals(Extra expected, Extra actual) {
        assertExtraAutoGeneratedPropertiesEquals(expected, actual);
        assertExtraAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExtraAllUpdatablePropertiesEquals(Extra expected, Extra actual) {
        assertExtraUpdatableFieldsEquals(expected, actual);
        assertExtraUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExtraAutoGeneratedPropertiesEquals(Extra expected, Extra actual) {
        assertThat(expected)
            .as("Verify Extra auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExtraUpdatableFieldsEquals(Extra expected, Extra actual) {
        assertThat(expected)
            .as("Verify Extra relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getPrice()).as("check price").isEqualTo(actual.getPrice()))
            .satisfies(e -> assertThat(e.getFreePrice()).as("check freePrice").isEqualTo(actual.getFreePrice()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExtraUpdatableRelationshipsEquals(Extra expected, Extra actual) {
        assertThat(expected)
            .as("Verify Extra relationships")
            .satisfies(e -> assertThat(e.getDevices()).as("check devices").isEqualTo(actual.getDevices()));
    }
}
